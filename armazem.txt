#include <iostream>
#include <string>
#include <stdexcept>

#include "../include/datastructures/listaencadeada.hpp"
#include "../include/datastructures/pilha.hpp"
#include "../include/datastructures/listadinamica.hpp"
#include "../include/tad/pacote.hpp"
#include "../include/tad/armazem.hpp"

void testarArmazem()
{
    std::cout << "****** INICIANDO TESTES COM A CLASSE Armazem ******" << std::endl;

    // --- Parâmetros da Simulação para o Teste ---
    const int ID_ARMAZEM_ATUAL = 0;
    const int ID_SECAO_DESTINO = 1;
    const double CUSTO_REMOCAO = 1.0;
    const double TEMPO_ATUAL = 200.0;

    // --- Teste 1: Configuração e Armazenamento Simples ---
    std::cout << "\n--- Teste 1: Setup e Armazenamento Simples ---" << std::endl;
    Armazem armazem(ID_ARMAZEM_ATUAL);
    armazem.adicionarConexaoDeSaida(ID_SECAO_DESTINO);
    std::cout << "Armazem " << armazem.getID() << " criado com secao para o armazem " << ID_SECAO_DESTINO << std::endl;

    Pacote p1(1, 0, 3, 10.0); // Pacote antigo, alta prioridade
    Pacote p2(2, 0, 3, 50.0); // Pacote novo, baixa prioridade

    std::cout << "Armazenando pacote 1 (T=10)..." << std::endl;
    armazem.armazenarPacote(&p1, ID_SECAO_DESTINO, 100.0);
    std::cout << "Armazenando pacote 2 (T=50)..." << std::endl;
    armazem.armazenarPacote(&p2, ID_SECAO_DESTINO, 110.0);

    std::cout << "Armazem tem pacotes armazenados? " << (armazem.temPacotesArmazenados() ? "Sim (OK)" : "Nao (FALHA)") << std::endl;
    std::cout << "Pilha da secao " << ID_SECAO_DESTINO << " agora contem (do topo para o fundo): [Pacote 2, Pacote 1]" << std::endl;

    // --- Teste 2: Recuperação de Pacotes (Prioridade vs LIFO) ---
    std::cout << "\n--- Teste 2: Recuperando 1 pacote (Capacidade = 1) ---" << std::endl;
    std::cout << "Regras: Capacidade=1, Prioridade para mais antigo, Custo de Remocao=" << CUSTO_REMOCAO << std::endl;

    // A pilha é [p2, p1]. O mais prioritário é p1. Para pegá-lo, é preciso remover p2.
    ListaDinamica<PacoteComAtraso> selecionados = armazem.recuperarPacotesParaTransporte(
        ID_SECAO_DESTINO, 1, CUSTO_REMOCAO, TEMPO_ATUAL);

    std::cout << "\n--- Verificando Resultado da Recuperacao ---" << std::endl;
    std::cout << "Numero de pacotes selecionados: " << selecionados.GetTamanho() << " (Esperado: 1)" << std::endl;

    if (selecionados.GetTamanho() > 0)
    {
        PacoteComAtraso &resultado = selecionados.BuscaElemento(0);
        std::cout << "  - Pacote selecionado ID: " << resultado.pacote->getID() << " (Esperado: 1, o mais antigo)" << std::endl;

        // No desempilhamento, p2 saiu primeiro (0 pacotes em cima), p1 saiu em segundo (1 pacote em cima).
        double atraso_esperado = 1 * CUSTO_REMOCAO;
        std::cout << "  - Atraso de manipulacao: " << resultado.atraso_de_manipulacao << " (Esperado: " << atraso_esperado << ")" << std::endl;
    }

    std::cout << "\nArmazem tem pacotes armazenados apos a recuperacao? " << (armazem.temPacotesArmazenados() ? "Sim (OK)" : "Nao (FALHA)") << std::endl;
    std::cout << "  (Esperado: Sim, pois o pacote 2 foi rearmazenado)" << std::endl;

    // --- Teste 3: Esvaziando a Seção ---
    std::cout << "\n--- Teste 3: Esvaziando a secao restante ---" << std::endl;
    // Agora só o pacote 2 está na seção
    selecionados = armazem.recuperarPacotesParaTransporte(ID_SECAO_DESTINO, 2, CUSTO_REMOCAO, TEMPO_ATUAL + 1);
    std::cout << "PACOTES SELECIONADOS:" << std::endl;
    if (selecionados.ListaVazia())
    {
        std::cout << "  (Nenhum)" << std::endl;
    }
    else
    {
        for (int i = 0; i < selecionados.GetTamanho(); i++)
        {
            // Acessa o struct PacoteComAtraso na posição i
            PacoteComAtraso resultado = selecionados.BuscaElemento(i);

            // Imprime as informações do pacote e seu atraso
            std::cout << "  - Pacote ID: " << resultado.pacote->getID()
                      << " | Atraso de Manipulacao: " << resultado.atraso_de_manipulacao
                      << std::endl;
        }
    }

    std::cout << "\n--- Verificando Resultado da Recuperacao Final ---" << std::endl;
    std::cout << "Numero de pacotes selecionados: " << selecionados.GetTamanho() << " (Esperado: 1)" << std::endl;

    if (selecionados.GetTamanho() > 0)
    {
        PacoteComAtraso &resultado = selecionados.BuscaElemento(0);
        std::cout << "  - Pacote selecionado ID: " << resultado.pacote->getID() << " (Esperado: 2)" << std::endl;

        // p2 estava no topo, então não há custo de manipulação para removê-lo.
        double atraso_esperado = 0 * CUSTO_REMOCAO;
        std::cout << "  - Atraso de manipulacao: " << resultado.atraso_de_manipulacao << " (Esperado: " << atraso_esperado << ")" << std::endl;
    }

    std::cout << "\nArmazem tem pacotes armazenados apos a recuperacao final? " << armazem.temPacotesArmazenados() << std::endl;
    std::cout << "\nArmazem tem pacotes armazenados apos a recuperacao final? " << (armazem.temPacotesArmazenados() ? "Sim (FALHA)" : "Não (OK)") << std::endl;

    std::cout << "\n****** FIM DOS TESTES DO ARMAZEM ******" << std::endl;
}

int main()
{
    testarArmazem();

    return 0;
}